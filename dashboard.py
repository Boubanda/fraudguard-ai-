"""
üìà Dashboard FraudGuard AI - Streamlit
Interface business pour monitoring temps r√©el
Version √©tendue avec IA Explicable, BI et Monitoring Syst√®me
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import time
import random
from datetime import datetime, timedelta
import json

from config import *

# ===== NOUVEAUX IMPORTS =====
from explainable_ai import QuickExplainer
from business_intelligence import BusinessIntelligence  
from system_monitor import system_monitor

# ===== CONFIGURATION STREAMLIT =====

st.set_page_config(
    page_title="FraudGuard AI Dashboard",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== INITIALISATION SESSION STATE =====

# Initialiser les nouvelles fonctionnalit√©s
if 'business_intelligence' not in st.session_state:
    st.session_state.business_intelligence = BusinessIntelligence()

if 'explainer' not in st.session_state:
    st.session_state.explainer = None  # Sera initialis√© quand le mod√®le sera charg√©

# ===== FONCTIONS UTILITAIRES =====

@st.cache_data(ttl=30)  # Cache pendant 30 secondes
def load_transaction_data():
    """Charge les donn√©es de transactions"""
    try:
        df = pd.read_csv(TRANSACTIONS_FILE)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        return df
    except FileNotFoundError:
        st.error("‚ùå Fichier de donn√©es non trouv√©. Lancez d'abord data_generator.py")
        return pd.DataFrame()

@st.cache_data(ttl=10)
def get_api_metrics():
    """R√©cup√®re les m√©triques de l'API"""
    try:
        response = requests.get(f"http://localhost:{API_PORT}/metrics", timeout=5)
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException:
        pass
    return None

def call_predict_api(transaction_data):
    """Appelle l'API de pr√©diction"""
    try:
        response = requests.post(
            f"http://localhost:{API_PORT}/predict",
            json=transaction_data,
            timeout=5
        )
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Erreur API: {e}")
    return None

def simulate_transaction_api():
    """Simule une transaction via l'API"""
    try:
        response = requests.post(f"http://localhost:{API_PORT}/simulate-transaction", timeout=5)
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException:
        pass
    return None

# ===== NOUVELLES FONCTIONS =====

def show_explainable_ai():
    """Page IA Explicable"""
    st.header("üß† Intelligence Artificielle Explicable")
    
    st.info("üí° Cette fonctionnalit√© permet d'expliquer les d√©cisions du mod√®le IA en langage compr√©hensible, essentiel pour la conformit√© RGPD.")
    
    # Charger le mod√®le si pas d√©j√† fait
    if st.session_state.explainer is None:
        try:
            # Tentative de chargement du vrai mod√®le
            try:
                from fraud_model import FraudDetector
                detector = FraudDetector()
                if detector.load_model():
                    st.session_state.explainer = QuickExplainer(detector)
                    st.success("‚úÖ Explainer IA charg√©")
                else:
                    raise Exception("Mod√®le non trouv√©")
            except:
                st.warning("‚ö†Ô∏è Mod√®le non trouv√© - utilisation du mode d√©mo")
                st.session_state.explainer = QuickExplainer(None)
        except Exception as e:
            st.error(f"Erreur chargement explainer: {e}")
            return
    
    # Section d√©mo
    st.subheader("üéØ D√©monstration Interactive")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Transaction √† analyser:**")
        amount = st.slider("Montant (‚Ç¨)", 10, 2000, 500)
        hour = st.slider("Heure", 0, 23, 14)
        geo_risk = st.slider("Risque g√©ographique", 0.0, 1.0, 0.2, 0.01)
        velocity = st.selectbox("V√©locit√© (trans/h)", [1, 2, 3, 5, 8, 12])
        
        transaction_data = {
            'amount': amount,
            'hour': hour,
            'geographic_risk': geo_risk,
            'velocity_1h': velocity,
            'merchant_category': 'online'
        }
        
        # Simulation pr√©diction
        fraud_score = (geo_risk * 0.4 + (1 if hour < 6 or hour > 22 else 0) * 0.3 + 
                      (1 if amount > 1000 else 0) * 0.2 + (velocity / 12) * 0.1)
        
        prediction_result = {
            'fraud_score': min(fraud_score, 1.0),
            'risk_level': 'HIGH' if fraud_score > 0.7 else 'MEDIUM' if fraud_score > 0.4 else 'LOW',
            'is_fraud_predicted': fraud_score > 0.5
        }
        
        # Afficher pr√©diction
        risk_color = {'LOW': 'green', 'MEDIUM': 'orange', 'HIGH': 'red'}[prediction_result['risk_level']]
        st.markdown(f"**Score de fraude:** {prediction_result['fraud_score']:.2f}")
        st.markdown(f"**Niveau de risque:** :{risk_color}[{prediction_result['risk_level']}]")
    
    with col2:
        if st.button("üîç Expliquer cette pr√©diction", type="primary"):
            explanation = st.session_state.explainer.explain_prediction(transaction_data, prediction_result)
            
            st.subheader("üß† Explication de la d√©cision")
            
            # R√©sum√©
            st.write(explanation['summary'])
            st.metric("Confiance", f"{explanation['confidence']:.1%}")
            
            # Recommandation
            st.info(explanation['recommendation'])
            
            # Facteurs d√©taill√©s
            st.subheader("üìä Facteurs d'analyse")
            
            for i, factor in enumerate(explanation['factors'], 1):
                with st.expander(f"{'üö®' if factor['impact'] == 'RISK' else '‚úÖ'} {factor['factor']}: {factor['value']}"):
                    st.write(f"**Poids:** {factor['weight']:.0%}")
                    st.write(f"**Explication:** {factor['explanation']}")
            
            # Texte complet
            with st.expander("üìÑ Explication compl√®te"):
                explanation_text = st.session_state.explainer.create_explanation_text(explanation)
                st.markdown(explanation_text)

def show_business_intelligence():
    """Page Business Intelligence"""
    st.header("üíº Business Intelligence & ROI")
    
    bi = st.session_state.business_intelligence
    
    # P√©riode d'analyse
    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader("üìà Tableau de Bord Ex√©cutif")
    with col2:
        period = st.selectbox("P√©riode", [7, 30, 90], index=1)
    
    # G√©n√©rer r√©sum√©
    summary = bi.generate_executive_summary(period_days=period)
    
    # KPIs principaux en colonnes
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üí≥ Transactions", 
            f"{summary['metrics']['total_transactions']:,}",
            delta=f"+{random.randint(5, 15)}% vs p√©riode pr√©c√©dente"
        )
    
    with col2:
        st.metric(
            "üö® Fraudes d√©tect√©es", 
            f"{summary['metrics']['fraud_detected']:,}",
            delta=f"{summary['metrics']['fraud_rate_percent']:.1f}%",
            delta_color="inverse"
        )
    
    with col3:
        st.metric(
            "üéØ Pr√©cision mod√®le", 
            f"{summary['metrics']['model_accuracy']:.1f}%",
            delta=f"+{random.uniform(0.5, 2.0):.1f}%"
        )
    
    with col4:
        st.metric(
            "üí∞ √âconomies estim√©es", 
            f"{summary['financial_impact']['estimated_savings_period']:,}‚Ç¨",
            delta=f"ROI: {summary['financial_impact']['roi_percent']:.0f}%"
        )
    
    # ROI annuel en grand
    st.success(f"üíé **Projection annuelle:** {summary['financial_impact']['estimated_savings_annual']:,}‚Ç¨ d'√©conomies - Objectif 2.5M‚Ç¨ {'‚úÖ ATTEINT' if summary['financial_impact']['estimated_savings_annual'] > 2500000 else 'en cours'}")
    
    # Graphiques de tendance
    trends = bi.create_trend_data()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìâ √âvolution Taux de Fraude")
        trend_df = pd.DataFrame({
            'Mois': trends['months'],
            'Taux Fraude (%)': trends['fraud_rates']
        })
        st.line_chart(trend_df.set_index('Mois'))
    
    with col2:
        st.subheader("üìà Croissance √âconomies")
        savings_df = pd.DataFrame({
            'Mois': trends['months'],
            '√âconomies (‚Ç¨)': trends['savings']
        })
        st.line_chart(savings_df.set_index('Mois'))
    
    # Section recommandations
    st.subheader("üí° Recommandations Strat√©giques")
    
    for i, rec in enumerate(summary['recommendations'][:6], 1):  # Limiter √† 6
        st.write(f"{i}. {rec}")
    
    # Conformit√© r√©glementaire
    st.subheader("üìã Conformit√© R√©glementaire")
    
    compliance = bi.generate_compliance_report()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**RGPD**")
        st.success("‚úÖ Conforme") if compliance['gdpr_compliance']['status'] == 'COMPLIANT' else st.error("‚ùå Non conforme")
        st.write("‚Ä¢ IA explicable ‚úÖ")
        st.write("‚Ä¢ Droit √† l'explication ‚úÖ")
    
    with col2:
        st.markdown("**PSD2**") 
        st.success("‚úÖ Conforme") if compliance['psd2_compliance']['status'] == 'COMPLIANT' else st.error("‚ùå Non conforme")
        st.write("‚Ä¢ Monitoring transactions ‚úÖ")
        st.write("‚Ä¢ Pr√©vention fraude ‚úÖ")
    
    with col3:
        st.markdown("**ACPR**")
        st.success("‚úÖ Conforme") if compliance['acpr_guidelines']['status'] == 'COMPLIANT' else st.error("‚ùå Non conforme")
        st.write("‚Ä¢ Gouvernance IA ‚úÖ")
        st.write("‚Ä¢ Validation mod√®le ‚úÖ")
    
    # Export rapport
    st.subheader("üìÑ Export Rapport")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä T√©l√©charger JSON", type="secondary"):
            filename = bi.export_report(summary, 'json')
            st.success(f"‚úÖ Rapport export√©: {filename}")
    
    with col2:
        if st.button("üìÑ T√©l√©charger TXT", type="secondary"):
            filename = bi.export_report(summary, 'txt')  
            st.success(f"‚úÖ Rapport export√©: {filename}")

def show_system_monitoring():
    """Page Monitoring Syst√®me"""
    st.header("üìä Monitoring Syst√®me Temps R√©el")
    
    # Obtenir donn√©es monitoring
    dashboard_data = system_monitor.get_dashboard_data()
    
    # Status g√©n√©ral en grand
    health = dashboard_data['system_health']
    if health == 'HEALTHY':
        st.success("‚úÖ Syst√®me en fonctionnement optimal")
    elif health == 'WARNING':
        st.warning("‚ö†Ô∏è Alertes syst√®me - surveillance requise")
    else:
        st.error("üö® Probl√®mes critiques d√©tect√©s")
    
    # M√©triques syst√®me temps r√©el
    st.subheader("üñ•Ô∏è M√©triques Syst√®me")
    
    metrics = dashboard_data['current_metrics']
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        cpu_color = "normal"
        if metrics['cpu_usage_percent'] > 80:
            cpu_color = "inverse"
        st.metric("üîß CPU", f"{metrics['cpu_usage_percent']:.1f}%", delta_color=cpu_color)
    
    with col2:
        memory_color = "normal" 
        if metrics['memory_usage_percent'] > 85:
            memory_color = "inverse"
        st.metric("üíæ M√©moire", f"{metrics['memory_usage_percent']:.1f}%", delta_color=memory_color)
    
    with col3:
        st.metric("‚ö° Latence", f"{metrics['response_time_ms']:.0f}ms")
    
    with col4:
        st.metric("üîå Connexions", metrics['active_connections'])
    
    # M√©triques API
    st.subheader("üì° Statistiques API")
    
    api_stats = dashboard_data['api_statistics']
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä Requ√™tes totales", f"{api_stats['total_requests']:,}")
    
    with col2:
        fraud_rate_color = "inverse" if api_stats['fraud_rate_percent'] > 3 else "normal"
        st.metric("üö® Taux fraudes", f"{api_stats['fraud_rate_percent']:.1f}%", delta_color=fraud_rate_color)
    
    with col3:
        st.metric("‚è±Ô∏è Uptime", f"{api_stats['uptime_hours']:.1f}h")
    
    with col4:
        error_color = "inverse" if api_stats['error_rate_percent'] > 1 else "normal"
        st.metric("‚ùå Taux erreur", f"{api_stats['error_rate_percent']:.1f}%", delta_color=error_color)
    
    # Alertes actives
    alerts = dashboard_data['alerts']
    if alerts:
        st.subheader("üö® Alertes Syst√®me")
        
        for alert in alerts:
            severity_icons = {'INFO': '‚ÑπÔ∏è', 'WARNING': '‚ö†Ô∏è', 'CRITICAL': 'üö®'}
            severity_colors = {'INFO': 'info', 'WARNING': 'warning', 'CRITICAL': 'error'}
            
            icon = severity_icons.get(alert['severity'], 'üì¢')
            color_func = getattr(st, severity_colors.get(alert['severity'], 'info'))
            
            color_func(f"{icon} **{alert['type']}**: {alert['message']} - {alert['timestamp'].strftime('%H:%M:%S')}")
    
    # Tendances de performance
    if 'performance_trends' in dashboard_data and dashboard_data['performance_trends']:
        st.subheader("üìà Tendances Performance")
        
        trends = dashboard_data['performance_trends']
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            trend_icon = "üìà" if trends['cpu_trend'] == 'UP' else "üìâ"
            st.metric(f"{trend_icon} CPU Moyen", f"{trends['cpu_avg']:.1f}%")
        
        with col2:
            trend_icon = "üìà" if trends['memory_trend'] == 'UP' else "üìâ"
            st.metric(f"{trend_icon} M√©moire Moyenne", f"{trends['memory_avg']:.1f}%")
        
        with col3:
            trend_icon = "üìà" if trends['response_time_trend'] == 'UP' else "üìâ"
            st.metric(f"{trend_icon} Latence Moyenne", f"{trends['response_avg']:.1f}ms")
    
    # Auto-refresh
    col1, col2 = st.columns([1, 3])
    with col1:
        if st.checkbox("üîÑ Actualisation auto (5s)"):
            time.sleep(5)
            st.rerun()  # Corrig√©: st.experimental_rerun() -> st.rerun()
    
    with col2:
        if st.button("üîÑ Actualiser maintenant"):
            st.rerun()

# ===== INTERFACE PRINCIPALE =====

def main():
    """Interface principale du dashboard"""
    
    # En-t√™te
    st.title("üõ°Ô∏è FraudGuard AI Dashboard")
    st.markdown("**Syst√®me de d√©tection de fraude en temps r√©el - Soci√©t√© G√©n√©rale**")
    
    # Sidebar pour navigation
    st.sidebar.title("üìä Navigation")
    
    # MENU MODIFI√â avec nouvelles pages
    page = st.sidebar.selectbox(
        "Choisir une page",
        [
            "üè† Vue d'ensemble", 
            "üîç Pr√©diction Temps R√©el", 
            "üìä Analytics",
            "üß† IA Explicable",           # NOUVEAU
            "üíº Business Intelligence",   # NOUVEAU  
            "üìä Monitoring Syst√®me",      # NOUVEAU
            "üéØ Testing",
            "‚öôÔ∏è Monitoring"               # Ton monitoring existant
        ]
    )
    
    # M√©triques API en sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üåê Status API")
    
    api_metrics = get_api_metrics()
    if api_metrics:
        st.sidebar.success("‚úÖ API Connect√©e")
        st.sidebar.metric("Pr√©dictions totales", api_metrics.get('total_predictions', 0))
        st.sidebar.metric("Temps moyen (ms)", f"{api_metrics.get('avg_processing_time_ms', 0):.1f}")
        st.sidebar.metric("CPU (%)", f"{api_metrics.get('cpu_usage_percent', 0):.1f}")
    else:
        st.sidebar.error("‚ùå API D√©connect√©e")
        st.sidebar.info("Lancez: `python api_server.py`")
    
    # Router vers les pages (MODIFI√â)
    if page == "üè† Vue d'ensemble":
        show_overview()
    elif page == "üîç Pr√©diction Temps R√©el":
        show_real_time_prediction()
    elif page == "üìä Analytics":
        show_analytics()
    elif page == "üß† IA Explicable":
        show_explainable_ai()
    elif page == "üíº Business Intelligence":
        show_business_intelligence()
    elif page == "üìä Monitoring Syst√®me":
        show_system_monitoring()
    elif page == "üéØ Testing":
        show_testing()
    elif page == "‚öôÔ∏è Monitoring":
        show_monitoring()

# ===== FONCTIONS EXISTANTES (inchang√©es) =====

def show_overview():
    """Page vue d'ensemble"""
    
    st.header("üìä Vue d'ensemble du syst√®me")
    
    # Charger les donn√©es
    df = load_transaction_data()
    if df.empty:
        return
    
    # KPIs principaux
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_transactions = len(df)
        st.metric("üî¢ Transactions totales", f"{total_transactions:,}")
    
    with col2:
        fraud_count = df['is_fraud'].sum()
        fraud_rate = fraud_count / total_transactions * 100
        st.metric("üö® Fraudes d√©tect√©es", f"{fraud_count:,}", f"{fraud_rate:.2f}%")
    
    with col3:
        total_amount = df['amount'].sum()
        st.metric("üí∞ Montant total", f"{total_amount:,.0f}‚Ç¨")
    
    with col4:
        fraud_amount = df[df['is_fraud'] == 1]['amount'].sum()
        st.metric("üí∏ Montant fraudes", f"{fraud_amount:,.0f}‚Ç¨")
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Transactions par heure")
        hourly = df.groupby('hour').size().reset_index(name='count')
        fig = px.bar(hourly, x='hour', y='count', 
                    title="Distribution des transactions par heure")
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üîç R√©partition fraudes/l√©gitimes")
        fraud_dist = df['is_fraud'].value_counts()
        fig = px.pie(values=fraud_dist.values, 
                    names=['L√©gitimes', 'Fraudes'],
                    title="R√©partition des transactions")
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # ROI Business
    st.header("üíº Impact Business")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üí∞ √âconomies annuelles", "2.5M‚Ç¨", "+40%")
        st.caption("Fraudes √©vit√©es vs syst√®me actuel")
    
    with col2:
        st.metric("‚ö° Gain temps traitement", "-60%", "30s ‚Üí 12s")
        st.caption("R√©duction temps investigation")
    
    with col3:
        st.metric("üòä Satisfaction client", "+25%", "Moins de blocages")
        st.caption("R√©duction faux positifs")

def show_real_time_prediction():
    """Page pr√©diction temps r√©el"""
    
    st.header("üîç Pr√©diction de Fraude Temps R√©el")
    
    # V√©rifier API
    if not get_api_metrics():
        st.error("‚ùå API non disponible. Lancez d'abord: `python api_server.py`")
        return
    
    # Formulaire de transaction
    st.subheader("üí≥ Nouvelle Transaction")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        amount = st.number_input("Montant (‚Ç¨)", min_value=0.01, value=100.0, step=0.01)
        merchant_category = st.selectbox("Cat√©gorie marchand", 
                                       ['grocery', 'restaurant', 'online', 'retail', 'gas_station'])
        user_age = st.number_input("√Çge utilisateur", min_value=18, max_value=100, value=35)
        device_type = st.selectbox("Type device", ['mobile', 'desktop', 'tablet', 'atm'])
    
    with col2:
        hour = st.number_input("Heure", min_value=0, max_value=23, value=14)
        day_of_week = st.selectbox("Jour semaine", 
                                 [0, 1, 2, 3, 4, 5, 6], 
                                 format_func=lambda x: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'][x])
        account_age_days = st.number_input("√Çge compte (jours)", min_value=1, value=365)
        payment_method = st.selectbox("M√©thode paiement", 
                                    ['card_chip', 'card_swipe', 'contactless', 'online'])
    
    with col3:
        transaction_count_day = st.number_input("Nb trans aujourd'hui", min_value=0, value=3)
        velocity_1h = st.number_input("Nb trans derni√®re heure", min_value=0, value=1)
        geographic_risk = st.slider("Risque g√©ographique", 0.0, 1.0, 0.1, 0.01)
        device_risk = st.slider("Risque device", 0.0, 1.0, 0.1, 0.01)
    
    # Boutons d'action
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç Analyser Transaction", type="primary"):
            analyze_transaction(amount, merchant_category, hour, day_of_week, user_age, 
                              account_age_days, transaction_count_day, velocity_1h, 
                              geographic_risk, device_risk, device_type, payment_method)
    
    with col2:
        if st.button("üé≤ Transaction Al√©atoire"):
            simulate_random_transaction()

def analyze_transaction(amount, merchant_category, hour, day_of_week, user_age, 
                       account_age_days, transaction_count_day, velocity_1h, 
                       geographic_risk, device_risk, device_type, payment_method):
    """Analyse une transaction sp√©cifique"""
    
    # Construire la transaction
    transaction_data = {
        "transaction_id": f"manual_{int(time.time())}",
        "user_id": f"user_{np.random.randint(1000, 9999)}",
        "amount": amount,
        "merchant_category": merchant_category,
        "hour": hour,
        "day_of_week": day_of_week,
        "month": datetime.now().month,
        "user_age": user_age,
        "account_age_days": account_age_days,
        "transaction_count_day": transaction_count_day,
        "amount_last_hour": np.random.uniform(0, 200),
        "amount_last_day": np.random.uniform(50, 1000),
        "velocity_1h": velocity_1h,
        "avg_amount_30d": np.random.uniform(50, 500),
        "std_amount_30d": np.random.uniform(20, 200),
        "geographic_risk": geographic_risk,
        "device_risk": device_risk,
        "device_type": device_type,
        "payment_method": payment_method,
        "time_since_last_transaction": np.random.randint(10, 1440)
    }
    
    # Appel API
    with st.spinner("üîÑ Analyse en cours..."):
        result = call_predict_api(transaction_data)
    
    if result:
        show_prediction_result(result)
        
        # NOUVEAU: Int√©gration IA Explicable
        if st.session_state.explainer:
            if st.button("üîç Expliquer cette pr√©diction"):
                explanation = st.session_state.explainer.explain_prediction(transaction_data, result)
                
                with st.expander("üß† Explication IA", expanded=True):
                    st.write(explanation['summary'])
                    st.write(f"**Recommandation:** {explanation['recommendation']}")
                    
                    for factor in explanation['factors'][:3]:  # Top 3 facteurs
                        emoji = "üö®" if factor['impact'] == 'RISK' else "‚úÖ"
                        st.write(f"{emoji} **{factor['factor']}**: {factor['value']} (Poids: {factor['weight']:.0%})")

def simulate_random_transaction():
    """Simule une transaction al√©atoire"""
    with st.spinner("üé≤ G√©n√©ration transaction al√©atoire..."):
        result = simulate_transaction_api()
    
    if result:
        st.subheader("üé≤ Transaction Simul√©e")
        
        # Afficher la transaction
        col1, col2 = st.columns(2)
        
        with col1:
            st.json(result['transaction'])
        
        with col2:
            show_prediction_result(result['prediction'])

def show_prediction_result(result):
    """Affiche le r√©sultat d'une pr√©diction"""
    
    st.subheader("üéØ R√©sultat de l'Analyse")
    
    # Score principal
    fraud_score = result['fraud_score']
    risk_level = result['risk_level']
    action = result['action']
    
    # Couleur selon le risque
    if risk_level == "HIGH":
        color = "red"
    elif risk_level == "MEDIUM":
        color = "orange"
    elif risk_level == "LOW":
        color = "yellow"
    else:
        color = "green"
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üéØ Score Fraude", f"{fraud_score:.3f}")
    
    with col2:
        st.markdown(f"**Niveau Risque:** :{color}[{risk_level}]")
    
    with col3:
        st.markdown(f"**Action:** `{action}`")
    
    with col4:
        st.metric("‚ö° Temps traitement", f"{result['processing_time_ms']:.1f}ms")
    
    # D√©tails scores
    st.subheader("üìä D√©tail des Scores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gauge du score fraude
        fig = go.Figure(go.Indicator(
            mode = "gauge+number+delta",
            value = fraud_score,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "Score de Fraude"},
            delta = {'reference': 0.5},
            gauge = {
                'axis': {'range': [None, 1]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 0.2], 'color': "lightgray"},
                    {'range': [0.2, 0.5], 'color': "yellow"},
                    {'range': [0.5, 0.8], 'color': "orange"},
                    {'range': [0.8, 1], 'color': "red"}],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 0.8}}))
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Comparaison des mod√®les
        models_data = {
            'Mod√®le': ['XGBoost', 'Isolation Forest', 'Score Hybride'],
            'Score': [result.get('xgb_score', fraud_score), result.get('isolation_score', fraud_score*0.8), result['fraud_score']]
        }
        
        fig = px.bar(models_data, x='Mod√®le', y='Score', 
                    title="Comparaison des scores par mod√®le")
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

def show_analytics():
    """Page analytics d√©taill√©es"""
    
    st.header("üìä Analytics Avanc√©es")
    
    df = load_transaction_data()
    if df.empty:
        return
    
    # Analyse temporelle
    st.subheader("‚è∞ Analyse Temporelle")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Fraudes par heure
        fraud_by_hour = df.groupby(['hour', 'is_fraud']).size().unstack(fill_value=0)
        fraud_rate_hour = fraud_by_hour[1] / (fraud_by_hour[0] + fraud_by_hour[1]) * 100
        
        fig = px.line(x=fraud_rate_hour.index, y=fraud_rate_hour.values,
                     title="Taux de fraude par heure (%)")
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Montants par cat√©gorie
        category_stats = df.groupby(['merchant_category', 'is_fraud'])['amount'].mean().unstack(fill_value=0)
        
        fig = px.bar(category_stats, title="Montant moyen par cat√©gorie")
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des risques
    st.subheader("‚ö†Ô∏è Analyse des Risques")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Corr√©lation risques
        risk_cols = ['geographic_risk', 'device_risk', 'amount', 'velocity_1h']
        if all(col in df.columns for col in risk_cols):
            corr_matrix = df[risk_cols + ['is_fraud']].corr()
            
            fig = px.imshow(corr_matrix, text_auto=True, aspect="auto",
                           title="Matrice de corr√©lation des risques")
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribution montants fraudes vs l√©gitimes
        fig = go.Figure()
        
        fig.add_trace(go.Histogram(
            x=df[df['is_fraud']==0]['amount'],
            name='L√©gitimes',
            opacity=0.7,
            nbinsx=50
        ))
        
        fig.add_trace(go.Histogram(
            x=df[df['is_fraud']==1]['amount'],
            name='Fraudes',
            opacity=0.7,
            nbinsx=50
        ))
        
        fig.update_layout(
            title="Distribution des montants",
            xaxis_title="Montant (‚Ç¨)",
            yaxis_title="Fr√©quence",
            barmode='overlay',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)

def show_testing():
    """Page de tests du syst√®me"""
    
    st.header("üéØ Tests & Validation")
    
    if not get_api_metrics():
        st.error("‚ùå API non disponible pour les tests")
        return
    
    st.subheader("üöÄ Test de charge")
    
    if st.button("‚ñ∂Ô∏è Lancer test de charge (10 transactions)"):
        run_load_test()

def run_load_test():
    """Ex√©cute un test de charge"""
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    results = []
    
    for i in range(10):
        status_text.text(f'Test {i+1}/10 en cours...')
        
        # Simuler transaction
        result = simulate_transaction_api()
        if result:
            results.append({
                'transaction_id': result['transaction']['transaction_id'],
                'fraud_score': result['prediction']['fraud_score'],
                'processing_time': result['prediction']['processing_time_ms'],
                'risk_level': result['prediction']['risk_level']
            })
        
        progress_bar.progress((i + 1) / 10)
        time.sleep(0.1)
    
    # Afficher r√©sultats
    if results:
        results_df = pd.DataFrame(results)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("‚ö° Temps moyen", f"{results_df['processing_time'].mean():.1f}ms")
        
        with col2:
            st.metric("üìä Score moyen", f"{results_df['fraud_score'].mean():.3f}")
        
        with col3:
            high_risk = (results_df['risk_level'] == 'HIGH').sum()
            st.metric("üö® Transactions √† risque", f"{high_risk}/10")
        
        st.dataframe(results_df)

def show_monitoring():
    """Page monitoring syst√®me"""
    
    st.header("‚öôÔ∏è Monitoring Syst√®me")
    
    # M√©triques API
    api_metrics = get_api_metrics()
    
    if api_metrics:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üî¢ Pr√©dictions", api_metrics['total_predictions'])
        
        with col2:
            st.metric("‚ö° Temps moyen", f"{api_metrics['avg_processing_time_ms']:.1f}ms")
        
        with col3:
            st.metric("üíæ M√©moire", f"{api_metrics['memory_usage_percent']:.1f}%")
        
        with col4:
            st.metric("üîß CPU", f"{api_metrics['cpu_usage_percent']:.1f}%")
        
        # Auto-refresh
        if st.checkbox("üîÑ Actualisation automatique (5s)"):
            time.sleep(5)
            st.rerun()  # Corrig√©: st.experimental_rerun() -> st.rerun()
    
    else:
        st.error("‚ùå Impossible de r√©cup√©rer les m√©triques")

if __name__ == "__main__":
    main()