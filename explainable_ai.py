"""
üîç Explainable AI pour FraudGuard - Version Int√©gr√©e
Intelligence Artificielle Explicable pour d√©monstration
"""

import pandas as pd
import numpy as np

class QuickExplainer:
    def __init__(self, fraud_detector):
        self.model = fraud_detector
    
    def explain_prediction(self, transaction_data, prediction_result):
        """Explication simple et efficace d'une pr√©diction"""
        
        factors = []
        
        # Analyser le montant
        amount = transaction_data.get('amount', 0)
        if amount > 1000:
            factors.append({
                'factor': 'Montant √©lev√©',
                'value': f"{amount}‚Ç¨",
                'impact': 'RISK',
                'weight': 0.35,
                'explanation': 'Les transactions > 1000‚Ç¨ sont statistiquement plus risqu√©es'
            })
        elif amount < 10:
            factors.append({
                'factor': 'Montant tr√®s faible',
                'value': f"{amount}‚Ç¨", 
                'impact': 'RISK',
                'weight': 0.25,
                'explanation': 'Les micro-transactions peuvent indiquer des tests de fraude'
            })
        
        # Analyser l'heure
        hour = transaction_data.get('hour', 12)
        if hour < 6 or hour > 22:
            factors.append({
                'factor': 'Heure inhabituelle',
                'value': f"{hour}h",
                'impact': 'RISK', 
                'weight': 0.3,
                'explanation': 'Transactions nocturnes plus susceptibles d\'√™tre frauduleuses'
            })
        
        # Analyser le risque g√©ographique
        geo_risk = transaction_data.get('geographic_risk', 0)
        if geo_risk > 0.5:
            factors.append({
                'factor': 'Localisation √† risque',
                'value': f"{geo_risk:.0%}",
                'impact': 'RISK',
                'weight': 0.4,
                'explanation': 'Transaction depuis zone g√©ographique non habituelle'
            })
        
        # Analyser la v√©locit√©
        velocity = transaction_data.get('velocity_1h', 0)
        if velocity > 5:
            factors.append({
                'factor': 'V√©locit√© √©lev√©e', 
                'value': f"{velocity} trans/h",
                'impact': 'RISK',
                'weight': 0.35,
                'explanation': 'Trop de transactions en peu de temps'
            })
        
        # Si pas de facteurs de risque, ajouter facteurs positifs
        if not factors:
            factors.extend([
                {
                    'factor': 'Profil utilisateur normal',
                    'value': 'Comportement habituel',
                    'impact': 'SAFE',
                    'weight': 0.4,
                    'explanation': 'Transaction conforme au profil utilisateur'
                },
                {
                    'factor': 'Heure normale',
                    'value': f"{hour}h",
                    'impact': 'SAFE',
                    'weight': 0.3,
                    'explanation': 'Transaction durant heures normales d\'activit√©'
                }
            ])
        
        # Calcul score de confiance
        risk_factors = [f for f in factors if f['impact'] == 'RISK']
        confidence = prediction_result.get('fraud_score', 0.5)
        
        return {
            'factors': factors,
            'summary': f"D√©cision bas√©e sur {len(factors)} indicateur(s) principal(aux)",
            'confidence': confidence,
            'risk_factors_count': len(risk_factors),
            'recommendation': self._generate_recommendation(factors, confidence)
        }
    
    def _generate_recommendation(self, factors, confidence):
        """G√©n√®re une recommandation bas√©e sur l'analyse"""
        
        risk_factors = [f for f in factors if f['impact'] == 'RISK']
        
        if len(risk_factors) >= 3:
            return "üö® BLOCAGE RECOMMAND√â - Multiples indicateurs de risque d√©tect√©s"
        elif len(risk_factors) == 2:
            return "‚ö†Ô∏è ALERTE - Investigation manuelle recommand√©e"  
        elif len(risk_factors) == 1:
            return "üìä SURVEILLANCE - Monitorer cette transaction"
        else:
            return "‚úÖ APPROUV√â - Profil de risque normal"

    def create_explanation_text(self, explanation):
        """Cr√©e un texte d'explication format√©"""
        
        text = f"üß† **EXPLICATION DE LA D√âCISION IA**\n\n"
        text += f"**R√©sum√©:** {explanation['summary']}\n"
        text += f"**Confiance:** {explanation['confidence']:.1%}\n"
        text += f"**Recommandation:** {explanation['recommendation']}\n\n"
        
        text += "**üìä FACTEURS D'ANALYSE:**\n"
        for i, factor in enumerate(explanation['factors'], 1):
            emoji = "üö®" if factor['impact'] == 'RISK' else "‚úÖ"
            text += f"{i}. {emoji} **{factor['factor']}**: {factor['value']} "
            text += f"(Poids: {factor['weight']:.0%})\n"
            text += f"   üí° *{factor['explanation']}*\n\n"
        
        return text